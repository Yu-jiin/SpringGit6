	REST.txt
		
		* REST (REpresentational State Transfer) : 
			자원의 이름을 구분해서 자원의 상태를 주고받는 API 
			=> REST API는 URL을 설계하는 방식
			
			https://learn.microsoft.com/ko-kr/azure/architecture/best-practices/api-design
			
		* REST 제약조건
			- Client & Server (상호독립적 관계)
			- 무상태 (Stateless)
			- Cashable
			- Uniform Interface
			- 계층화
			
			=> 그래서 완벽한 REST 설계가 어렵다. >> WebAPI를 RESTAPI라고 부른다
			
			* 장점
				- URL만 보고도 어떤 행동을 수행하는지 명확하게 구분 가능
				- 상태가 없기 때문에 클라이언트/서버의 역할이 구분 된다. 
				- HTTP 표준 사용 => 대부분의 플랫폼에서 사용 가능
				
			* 단점
				- HTTP 메서드의 개수 제한 (GET/POST)
				- 공식적인 표준 규약이 없음
				- 설계가 어렵고 제약조건이 까다롭다
				
				
		* REST 설계방식
			- URL에는 동사 사용 X, 명사 사용 O
			- 동사의 표현은 HTTP 메서드로 표현 
			  [ GET(조회) / POST(입력) / PUT(전체수정) / PATCH(부분수정) / DELETE(삭제) ]
				/students/1(DELETE) => 1번 학생 삭제
				/students/1(GET) => 1번 학생 조회
			- 표현은 payload를 사용해서 표현 
			- URL에서의 /는 계층관계를 표현 (마지막 문자로 /를 사용 X)
			- URL에서 -(하이픈)사용, _(밑줄)사용X
			- URL은 소문자를 사용해서 작성
			- Document(문서 == 객체), Collection(문서들의 집합 == 객체들의 집합)
				   단수로 표현				복수로 표현 -s
			
			
		* 스프링에서는 @ResponseBody 지원(스프링 3~), @RestController
			
			
			
			
			
			
			
			
			
			
			
			
			
			